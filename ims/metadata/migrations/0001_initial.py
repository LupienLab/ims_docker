# Generated by Django 3.0.3 on 2024-06-11 15:16

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import metadata.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Biosample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this object is added to the system')),
                ('edited_at', models.DateTimeField(auto_now_add=True, help_text='When this object was edited last', verbose_name='Last edited at')),
                ('description', models.TextField(blank=True, help_text='Notes for the object', null=True)),
                ('contact_person', models.CharField(blank=True, help_text='Name of contact person', max_length=100, null=True)),
                ('contact_info', models.EmailField(blank=True, help_text='Email id for contact person', max_length=254, null=True)),
                ('delivery_date', models.DateField(blank=True, help_text='Delivery date for the object', null=True)),
                ('name', models.CharField(help_text='Name of the biosample, e.g. HeLa-p14-11302019 (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=500, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('sample_id', models.CharField(default='', help_text='Sample id / id given on sequencing form e.g. 080144A', max_length=100)),
                ('collection_date', models.DateField(blank=True, help_text='Collection date for this biosample', null=True)),
                ('collection_method', models.CharField(blank=True, help_text='Method of collection for this biosample', max_length=100, null=True)),
                ('json_fields', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the choice (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=50)),
                ('class_type', models.CharField(help_text='Class/type of the choice', max_length=50)),
            ],
            options={
                'ordering': ['class_type'],
            },
        ),
        migrations.CreateModel(
            name='ChoiceDisease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the choice (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=50)),
                ('class_type', models.CharField(help_text='Class/type of the choice', max_length=50)),
            ],
            options={
                'ordering': ['class_type'],
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this object is added to the system')),
                ('edited_at', models.DateTimeField(auto_now_add=True, help_text='When this object was edited last', verbose_name='Last edited at')),
                ('description', models.TextField(blank=True, help_text='Notes for the object', null=True)),
                ('name', models.CharField(help_text='Name of the experiment, e.g. K562-p11-DpnII-02202020-R1-T1 (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=500, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('uid', models.CharField(default='G7HXXY', help_text='Label for sequencing form', max_length=10)),
                ('biosample_quantity', models.IntegerField(help_text='The amount of starting Biological sample going into the experiment')),
                ('concentration_of_sample', models.CharField(blank=True, help_text='For DNA and Libraries, concentration of sample (ng/ul)', max_length=100, null=True)),
                ('volume_of_sample', models.CharField(blank=True, help_text='For Fresh cells, DNA and Libraries, Sample volume (uL or pellet)', max_length=100, null=True)),
                ('bio_rep_no', models.IntegerField(default=1, help_text='Biological replicate number')),
                ('tec_rep_no', models.IntegerField(default=1, help_text='Technical replicate number')),
                ('json_fields', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('biosample', models.ForeignKey(help_text='Related biosample', on_delete=django.db.models.deletion.CASCADE, related_name='exp_biosample', to='metadata.Biosample')),
                ('biosample_quantity_units', models.ForeignKey(blank=True, help_text='The units that go along with the biological sample quantity', limit_choices_to={'class_type': 'quantity_units'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biosample_quantity_units', to='metadata.Choice')),
                ('created_by', models.ForeignKey(help_text='Who created this object', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_experiment_created', to=settings.AUTH_USER_MODEL)),
                ('edited_by', models.ForeignKey(help_text='Who edited this object last', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_experiment_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last edited by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JsonObj',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the object (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=500, unique=True)),
                ('json_type', models.CharField(help_text='Class/type of the object', max_length=50)),
                ('json_fields', django.contrib.postgres.fields.jsonb.JSONField(default=metadata.models.JsonObj.fields_default)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this object is added to the system')),
                ('edited_at', models.DateTimeField(auto_now_add=True, help_text='When this object was edited last', verbose_name='Last edited at')),
                ('description', models.TextField(blank=True, help_text='Notes for the object', null=True)),
                ('user_name_string', models.CharField(default='default', help_text='Max length=8 char, user defined relevant string for the project (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=8, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('starting_date', models.DateField(default=django.utils.timezone.now, help_text='When the project was started')),
                ('name', models.CharField(help_text='User defined relevant string for the project (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=500, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Archived', 'Archived')], default='Active', help_text='Is project currently in progress', max_length=10)),
                ('contributor', models.ManyToManyField(blank=True, help_text='Collaborating members for this project', related_name='project_contibutor', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='Who created this object', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_project_created', to=settings.AUTH_USER_MODEL)),
                ('disease_site', models.ForeignKey(default=5, help_text='Type of cancer', limit_choices_to={'class_type': 'disease_site'}, on_delete=django.db.models.deletion.CASCADE, related_name='disease_site', to='metadata.ChoiceDisease')),
                ('edited_by', models.ForeignKey(help_text='Who edited this object last', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_project_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last edited by')),
                ('lab_name', models.ManyToManyField(blank=True, help_text='To which the lab project belong', limit_choices_to={'class_type': 'lab_name'}, related_name='lab_project', to='metadata.Choice')),
                ('tissue_type', models.ManyToManyField(default=5, help_text='Tissue type of cancer', limit_choices_to={'class_type': 'tissue_type'}, related_name='tissue_type', to='metadata.Choice')),
            ],
            options={
                'ordering': ['-pk'],
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this object is added to the system')),
                ('edited_at', models.DateTimeField(auto_now_add=True, help_text='When this object was edited last', verbose_name='Last edited at')),
                ('description', models.TextField(blank=True, help_text='Notes for the object', null=True)),
                ('name', models.CharField(help_text='Name of the treatment (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=500, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('json_fields', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='media/')),
                ('created_by', models.ForeignKey(help_text='Who created this object', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_treatment_created', to=settings.AUTH_USER_MODEL)),
                ('edited_by', models.ForeignKey(help_text='Who edited this object last', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_treatment_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last edited by')),
                ('json_type', models.ForeignKey(help_text='The method used to make the treatment', limit_choices_to={'json_type': 'treatment_type'}, on_delete=django.db.models.deletion.CASCADE, to='metadata.JsonObj', verbose_name='treatment type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SequencingRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this object is added to the system')),
                ('edited_at', models.DateTimeField(auto_now_add=True, help_text='When this object was edited last', verbose_name='Last edited at')),
                ('description', models.TextField(blank=True, help_text='Notes for the object', null=True)),
                ('name', models.CharField(default='', help_text='Name of the sequencing run (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=300, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('submission_date', models.DateField(help_text='Submission date for sample')),
                ('retrieval_date', models.DateField(default=django.utils.timezone.now, help_text='Date when the sequencing run is received')),
                ('created_by', models.ForeignKey(help_text='Who created this object', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_sequencingrun_created', to=settings.AUTH_USER_MODEL)),
                ('edited_by', models.ForeignKey(help_text='Who edited this object last', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_sequencingrun_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last edited by')),
                ('experiment', models.ManyToManyField(related_name='run_experiment', to='metadata.Experiment')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='run_project', to='metadata.Project')),
                ('sequencing_center', models.ForeignKey(blank=True, help_text='Where the sequencing has been done', limit_choices_to={'class_type': 'sequencing_center'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='run_sequencing_center', to='metadata.Choice')),
                ('sequencing_instrument', models.ForeignKey(blank=True, help_text='Instrument used for sequencing', limit_choices_to={'class_type': 'sequencing_instrument'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='run_sequencing_instrument', to='metadata.Choice')),
            ],
            options={
                'unique_together': {('project', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this object is added to the system')),
                ('edited_at', models.DateTimeField(auto_now_add=True, help_text='When this object was edited last', verbose_name='Last edited at')),
                ('description', models.TextField(blank=True, help_text='Notes for the object', null=True)),
                ('name', models.CharField(help_text='Name of the protocol (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=500, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('attachment', models.FileField(blank=True, null=True, upload_to='media/')),
                ('class_type', models.ForeignKey(blank=True, help_text='The category that best describes the protocol or document', limit_choices_to={'class_type': 'protocol_type'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='metadata.Choice')),
                ('created_by', models.ForeignKey(help_text='Who created this object', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_protocol_created', to=settings.AUTH_USER_MODEL)),
                ('edited_by', models.ForeignKey(help_text='Who edited this object last', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_protocol_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last edited by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Modification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this object is added to the system')),
                ('edited_at', models.DateTimeField(auto_now_add=True, help_text='When this object was edited last', verbose_name='Last edited at')),
                ('description', models.TextField(blank=True, help_text='Notes for the object', null=True)),
                ('name', models.CharField(help_text='Name of the modification (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=500, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('guide_rnas', models.CharField(blank=True, help_text='The guide RNA sequences used in Crispr targetting', max_length=100, null=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='media/')),
                ('created_by', models.ForeignKey(help_text='Who created this object', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_modification_created', to=settings.AUTH_USER_MODEL)),
                ('edited_by', models.ForeignKey(help_text='Who edited this object last', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_modification_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last edited by')),
                ('genomic_change', models.ForeignKey(blank=True, help_text='The method used to make the genomic modification', limit_choices_to={'class_type': 'genomic_change'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='genomic_change', to='metadata.Choice')),
                ('modification_type', models.ForeignKey(blank=True, help_text='The method used to make the genomic modification', limit_choices_to={'class_type': 'modification_type'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modification_type', to='metadata.Choice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='experiment',
            name='json_type',
            field=models.ForeignKey(help_text='The category that best describes the experiment', limit_choices_to={'json_type': 'experiment_type'}, on_delete=django.db.models.deletion.CASCADE, to='metadata.JsonObj', verbose_name='experiment type'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exp_project', to='metadata.Project'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='protocol',
            field=models.ForeignKey(blank=True, help_text='Reference protocol document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exp_protocol', to='metadata.Protocol'),
        ),
        migrations.CreateModel(
            name='Biosource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this object is added to the system')),
                ('edited_at', models.DateTimeField(auto_now_add=True, help_text='When this object was edited last', verbose_name='Last edited at')),
                ('description', models.TextField(blank=True, help_text='Notes for the object', null=True)),
                ('name', models.CharField(help_text='Name of the Biosource (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=500, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('disease', models.CharField(blank=True, help_text='Name of the disease', max_length=500, null=True)),
                ('json_fields', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('created_by', models.ForeignKey(help_text='Who created this object', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_biosource_created', to=settings.AUTH_USER_MODEL)),
                ('edited_by', models.ForeignKey(help_text='Who edited this object last', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_biosource_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last edited by')),
                ('json_type', models.ForeignKey(help_text='The categorization of the biomaterial/biosource', limit_choices_to={'json_type': 'biomaterial_type'}, on_delete=django.db.models.deletion.CASCADE, related_name='biomaterial_type', to='metadata.JsonObj', verbose_name='biomaterial type')),
                ('source_organism', models.ForeignKey(blank=True, help_text='Source of the biomaterial/biosource', limit_choices_to={'class_type': 'source_organism'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_organism', to='metadata.Choice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='biosample',
            name='biosource',
            field=models.ForeignKey(help_text='Related biosource', on_delete=django.db.models.deletion.CASCADE, related_name='sample_source', to='metadata.Biosource'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='created_by',
            field=models.ForeignKey(help_text='Who created this object', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_biosample_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='biosample',
            name='edited_by',
            field=models.ForeignKey(help_text='Who edited this object last', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_biosample_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last edited by'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='json_type',
            field=models.ForeignKey(help_text='Preprocessing details of the sample', limit_choices_to={'json_type': 'preprocessing_details'}, on_delete=django.db.models.deletion.CASCADE, related_name='preprocessing_details', to='metadata.JsonObj', verbose_name='Preprocessing details'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='lab_name',
            field=models.ForeignKey(blank=True, help_text='Name of the contributing lab (allowed characters [0-9a-zA-Z-._], no spaces allowed)', limit_choices_to={'class_type': 'lab_name'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lab_name', to='metadata.Choice', verbose_name='contributing lab'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='modification',
            field=models.ForeignKey(blank=True, help_text="Expression or targeting vectors stably transfected to generate Crispr'ed or other genomic modification", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exp_modification', to='metadata.Modification'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='treatment',
            field=models.ForeignKey(blank=True, help_text='Chemical/RNAi treatment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='exp_treatment', to='metadata.Treatment'),
        ),
        migrations.CreateModel(
            name='SeqencingFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this object is added to the system')),
                ('edited_at', models.DateTimeField(auto_now_add=True, help_text='When this object was edited last', verbose_name='Last edited at')),
                ('description', models.TextField(blank=True, help_text='Notes for the object', null=True)),
                ('name', models.CharField(default='', help_text='Name of the sequencing file (allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=300, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('paired_end', models.CharField(blank=True, choices=[('', ''), ('1', '1'), ('2', '2'), ('3', '3'), ('index', 'index')], default='', help_text='Which pair the file belongs to (if paired end library)', max_length=8, null=True)),
                ('read_length', models.IntegerField(blank=True, help_text='Length of sequencing reads in base pairs for fastq files', null=True)),
                ('cluster_path', models.CharField(default='', help_text='Path on the cluster including the file name and extension e.g /mnt/work1/users/lupiengroup/Projects/folder/test.fastq.gz', max_length=1000)),
                ('duplicate_path', models.CharField(blank=True, default='', help_text='Duplicate path on the cluster including the file name and extension e.g /mnt/work1/users/lupiengroup/Projects/folder/test.fastq.gz', max_length=1000, null=True)),
                ('archived_path', models.CharField(blank=True, default='', help_text='Path on the S3 if the data is archived', max_length=1000, null=True)),
                ('md5sum', models.CharField(blank=True, default='', help_text='md5sum', max_length=32, null=True)),
                ('fastqc_html', models.FileField(blank=True, null=True, upload_to='media/')),
                ('assay', models.ForeignKey(blank=True, default='', help_text='Assay of file format (important in case of multiome experiments)', limit_choices_to={'class_type': 'file_assay'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fileassayChoice', to='metadata.Choice')),
                ('created_by', models.ForeignKey(help_text='Who created this object', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_seqencingfile_created', to=settings.AUTH_USER_MODEL)),
                ('edited_by', models.ForeignKey(help_text='Who edited this object last', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_seqencingfile_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last edited by')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_exp', to='metadata.Experiment')),
                ('file_format', models.ForeignKey(blank=True, default='', help_text='Type of file format', limit_choices_to={'class_type': 'file_format'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fileChoice', to='metadata.Choice')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_Project', to='metadata.Project')),
                ('related_files', models.ManyToManyField(blank=True, help_text='Related paired file reference', to='metadata.SeqencingFile')),
                ('run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_run', to='metadata.SequencingRun')),
            ],
            options={
                'unique_together': {('project', 'md5sum', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ExperimentTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this object is added to the system')),
                ('edited_at', models.DateTimeField(auto_now_add=True, help_text='When this object was edited last', verbose_name='Last edited at')),
                ('description', models.TextField(blank=True, help_text='Notes for the object', null=True)),
                ('name', models.CharField(default='', help_text='Name of the tags (Unique throughout system. Allowed characters [0-9a-zA-Z-._], no spaces allowed)', max_length=300, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-._]*$', 'Only alphanumeric characters, dashes, underscores and dots are allowed in names, spaces are not allowed.')])),
                ('created_by', models.ForeignKey(help_text='Who created this object', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_experimenttag_created', to=settings.AUTH_USER_MODEL)),
                ('edited_by', models.ForeignKey(help_text='Who edited this object last', on_delete=django.db.models.deletion.CASCADE, related_name='metadata_experimenttag_edited', to=settings.AUTH_USER_MODEL, verbose_name='Last edited by')),
                ('experiment', models.ManyToManyField(related_name='tag_experiment', to='metadata.Experiment')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_project', to='metadata.Project')),
            ],
            options={
                'unique_together': {('name',)},
            },
        ),
    ]
